CREATE FUNCTION refresh_update_at() RETURNS TRIGGER
    LANGUAGE plpgsql AS
$$
BEGIN
    new.updated_at := current_timestamp;
    RETURN new;
END;
$$;

CREATE TABLE accounts
(
    -- Unique identifier for an account, used as a public resource.
    id            UUID PRIMARY KEY   DEFAULT gen_random_uuid(),

    -- User-provided account name, usually a full name.
    display_name  TEXT      NOT NULL,
    -- User-provided unique account email address.
    email_address TEXT      NOT NULL,
    -- User-provided hashed account plain password.
    password_hash TEXT      NOT NULL,

    CONSTRAINT accounts_non_empty_display_name CHECK (display_name <> ''),
    CONSTRAINT accounts_non_empty_email_address CHECK (email_address <> ''),
    CONSTRAINT accounts_non_empty_password_hash CHECK (password_hash <> ''),

    -- Timestamps for tracking the record's lifecycle.
    created_at    TIMESTAMP NOT NULL DEFAULT current_timestamp,
    updated_at    TIMESTAMP NOT NULL DEFAULT current_timestamp,
    deleted_at    TIMESTAMP          DEFAULT NULL,

    -- Ensures the record was updated only after it was created.
    CONSTRAINT accounts_updated_after_created CHECK (updated_at >= created_at),
    -- Ensures the record was deleted only after it was created.
    CONSTRAINT accounts_deleted_after_created CHECK (deleted_at IS NULL OR deleted_at >= created_at),
    -- Ensures the record was deleted only after it was updated.
    CONSTRAINT accounts_deleted_after_updated CHECK (deleted_at IS NULL OR deleted_at >= updated_at)
);

-- Partial unique index to enforce uniqueness on email addresses for active accounts.
CREATE UNIQUE INDEX accounts_unique_email_address_idx ON accounts (email_address)
    WHERE deleted_at IS NULL;

-- Index to speed up lookups by account credentials, filtering to include active accounts.
CREATE INDEX accounts_local_credentials_idx ON accounts (email_address, password_hash)
    WHERE deleted_at IS NULL;

-- Trigger to automatically update the timestamp on any record update.
CREATE TRIGGER accounts_update_at_trigger
    BEFORE UPDATE
    ON accounts
    FOR EACH ROW
EXECUTE PROCEDURE refresh_update_at();

CREATE TABLE account_sessions
(
    -- Token sequence (unique within each account).
    token_seq  UUID      NOT NULL DEFAULT gen_random_uuid(),
    -- Account owning the current session.
    account_id UUID REFERENCES accounts (id) ON DELETE CASCADE,
    -- Region unique identifier (must be alphanumeric, exactly 2 characters).
    region_id  CHAR(2)   NOT NULL DEFAULT 'A0',

    -- Composite primary key for the account ID and token sequence.
    -- Ensure each token sequence is unique per account.
    CONSTRAINT accounts_sessions_pkey PRIMARY KEY (account_id, token_seq, region_id),
    -- Ensure region_id is alphanumeric (2 characters: uppercase letters and digits only).
    CONSTRAINT accounts_sessions_region_alphanumeric CHECK (region_id ~ '^[A-Z0-9]{2}$'),

    -- IP address for optional session security tracking.
    ip_address INET      NOT NULL,
    -- User agent for optional session security tracking.
    user_agent TEXT      NOT NULL,

    issued_at  TIMESTAMP NOT NULL DEFAULT current_timestamp,
    expired_at TIMESTAMP NOT NULL DEFAULT current_timestamp + INTERVAL '1 day' * 7,
    deleted_at TIMESTAMP          DEFAULT NULL,

    -- Ensures the record was expired only after it was issued.
    CONSTRAINT accounts_sessions_expired_after_issued CHECK (expired_at >= issued_at),
    -- Ensures the record was deleted only after it was issued.
    CONSTRAINT accounts_sessions_deleted_after_issued CHECK (deleted_at IS NULL OR deleted_at >= issued_at)
);

-- Index to speed up lookups by session account & token, filtering to include active sessions.
CREATE INDEX accounts_sessions_only_active_idx ON account_sessions (account_id, token_seq)
    WHERE deleted_at IS NULL;

-- Lists all elevated-privilege accounts (universal read & write rights).
CREATE TABLE account_permissions
(
    id            INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    account_id    UUID PRIMARY KEY REFERENCES accounts (id) ON DELETE CASCADE,

    nocheck_read  BOOLEAN   NOT NULL DEFAULT FALSE,
    nocheck_write BOOLEAN   NOT NULL DEFAULT FALSE,

    -- Timestamps for tracking the record's lifecycle.
    created_at    TIMESTAMP NOT NULL DEFAULT current_timestamp,
    deleted_at    TIMESTAMP          DEFAULT NULL,

    -- Ensures the record was deleted only after it was created.
    CONSTRAINT account_permissions_deleted_after_created CHECK (deleted_at IS NULL
        OR deleted_at > created_at)
);

-- Index to speed up lookups by account idn, filtering to both read/write permissions.
CREATE INDEX accounts_permissions_absolute_idx ON account_permissions (account_id)
    WHERE nocheck_read IS TRUE AND nocheck_write IS TRUE;

CREATE TYPE EMAIL_TYPE AS ENUM ('confirm_email', 'update_email', 'reset_password');

CREATE TABLE account_emails
(
    action_token UUID       NOT NULL DEFAULT gen_random_uuid(),
    account_id   UUID REFERENCES accounts (id) ON DELETE CASCADE,

    target_email TEXT       NOT NULL,
    action_type  EMAIL_TYPE NOT NULL,

    -- Unique index to enforce uniqueness on email tokens per account.
    CONSTRAINT account_emails_unique_token_idx PRIMARY KEY (account_id, action_token),

    -- Timestamps for tracking the record's lifecycle.
    issued_at    TIMESTAMP  NOT NULL DEFAULT current_timestamp,
    expired_at   TIMESTAMP  NOT NULL DEFAULT current_timestamp + INTERVAL '1 day' * 7,
    used_at      TIMESTAMP           DEFAULT NULL,

    -- Ensures the record was expired only after it was issued.
    CONSTRAINT account_emails_expired_after_issued CHECK (expired_at >= issued_at),
    -- Ensures the record was used only after it was issued.
    CONSTRAINT account_emails_used_after_issued CHECK (used_at IS NULL OR used_at >= issued_at)
);

CREATE TABLE projects
(
    -- Unique identifier for a project, used as a public resource.
    id           UUID PRIMARY KEY   DEFAULT gen_random_uuid(),

    -- User-provided project name.
    display_name TEXT      NOT NULL DEFAULT 'Untitled',
    -- User-provided project metadata (description, tags, etc).
    project_meta JSONB     NOT NULL DEFAULT '{}'::JSONB,

    -- Ensures the project name is not empty.
    CONSTRAINT projects_non_empty_display_name CHECK (display_name <> ''),
    -- Limits the size of the project metadata JSONB field.
    CONSTRAINT projects_workflow_meta_limit CHECK (length(project_meta::TEXT) <= 2048),

    accessed_at  TIMESTAMP NOT NULL DEFAULT current_timestamp,
    archived_at  TIMESTAMP          DEFAULT NULL,

    -- Ensures that the record was accessed only after it was updated.
    CONSTRAINT projects_accessed_after_updated CHECK (updated_at >= updated_at),
    -- Ensures that the record was archived only after it was updated.
    CONSTRAINT projects_archived_after_updated CHECK (updated_at >= updated_at),

    created_at   TIMESTAMP NOT NULL DEFAULT current_timestamp,
    updated_at   TIMESTAMP NOT NULL DEFAULT current_timestamp,
    deleted_at   TIMESTAMP          DEFAULT NULL,

    -- Ensures the record was updated only after it was created.
    CONSTRAINT projects_updated_after_created CHECK (updated_at >= created_at),
    -- Ensures the record was deleted only after it was created.
    CONSTRAINT projects_deleted_after_created CHECK (deleted_at IS NULL OR deleted_at >= created_at),
    -- Ensures the record was deleted only after it was updated.
    CONSTRAINT projects_deleted_after_updated CHECK (deleted_at IS NULL OR deleted_at >= updated_at)
);

CREATE TABLE project_members
(
    id         BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

    -- ID of the account the membership is associated with.
    account_id UUID      NOT NULL REFERENCES accounts (id) ON DELETE CASCADE,
    -- ID of the project the membership is associated with.
    project_id UUID      NOT NULL REFERENCES projects (id) ON DELETE CASCADE,

    -- Flags for visibility and project priority.
    show_order INT       NOT NULL DEFAULT 0,
    is_pinned  BOOLEAN   NOT NULL DEFAULT FALSE,
    is_hidden  BOOLEAN   NOT NULL DEFAULT FALSE,

    -- Timestamps for tracking member's record lifecycle.
    created_at TIMESTAMP NOT NULL DEFAULT current_timestamp,
    updated_at TIMESTAMP NOT NULL DEFAULT current_timestamp,
    deleted_at TIMESTAMP          DEFAULT NULL,

    -- Ensures the record was updated only after it was created.
    CONSTRAINT project_members_updated_after_created CHECK (
        updated_at >= created_at),
    -- Ensures the record was deleted only after it was created.
    CONSTRAINT project_members_deleted_after_created CHECK (
        deleted_at IS NULL OR deleted_at >= created_at),
    -- Ensures the record was deleted only after it was updated.
    CONSTRAINT project_members_deleted_after_updated CHECK (
        deleted_at IS NULL OR deleted_at >= updated_at)
);

-- Index to speed up lookups by account, filtering to only include active members.
CREATE INDEX project_members_account_id_idx ON project_members (account_id)
    WHERE deleted_at IS NOT NULL;
-- Index to speed up lookups by project, filtering to only include active members.
CREATE INDEX project_members_project_id_idx ON project_members (project_id)
    WHERE deleted_at IS NOT NULL;

-- Trigger to automatically update the timestamp on any record update.
CREATE TRIGGER project_members_update_at_trigger
    BEFORE UPDATE
    ON project_members
    FOR EACH ROW
EXECUTE PROCEDURE refresh_update_at();

-- Define an ENUM type for invite status, with possible values:
-- 'pending' (default), 'accepted', 'declined', and 'canceled'.
CREATE TYPE INVITE_STATUS AS ENUM ('pending', 'accepted', 'declined', 'canceled');

CREATE TABLE project_invites
(
    id         BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

    -- ID of the account being invited.
    account_id UUID          NOT NULL REFERENCES accounts (id) ON DELETE CASCADE,
    -- ID of the project the invite is associated with.
    project_id UUID          NOT NULL REFERENCES projects (id) ON DELETE CASCADE,
    -- Current status of the invite (pending, accepted, declined, or canceled).
    status     INVITE_STATUS NOT NULL DEFAULT 'pending',

    -- Timestamp recording when the invite was created.
    created_at TIMESTAMP     NOT NULL DEFAULT current_timestamp,
    -- Timestamp recording when the invite status was updated.
    updated_at TIMESTAMP     NOT NULL DEFAULT current_timestamp,

    -- Ensures that the invite was updated only after it was created.
    CONSTRAINT project_invites_updated_after_created CHECK (updated_at >= created_at)
);

-- Index on account_id to speed up lookups by account,
-- filtering to only include pending invites.
CREATE INDEX project_invites_account_id_idx ON project_invites (account_id)
    WHERE status = 'pending';
-- Index on project_id to speed up lookups by project,
-- filtering to only include pending invites.
CREATE INDEX project_invites_project_id_idx ON project_invites (project_id)
    WHERE status = 'pending';


CREATE TABLE project_webhooks
(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
);

CREATE TABLE workflows
(
    -- Unique identifier for a workflow, used as a public resource.
    id            UUID PRIMARY KEY   DEFAULT gen_random_uuid(),
    project_id    UUID REFERENCES projects (id) ON DELETE CASCADE,

    -- User-provided unique workflow name within each project.
    display_name  TEXT      NOT NULL DEFAULT 'Untitled',
    -- Tags, descriptions, and other optional properties.
    properties    JSONB     NOT NULL DEFAULT '{}'::JSONB,

    -- Ensures workflow name uniqueness per project.
    CONSTRAINT workflows_unique_display_name UNIQUE (project_id, display_name),
    -- Ensures workflow name is not empty.
    CONSTRAINT workflows_non_empty_display_name CHECK (display_name <> ''),
    -- Limits the size of the meta JSONB field.
    CONSTRAINT workflows_meta_limit CHECK (length(properties::TEXT) <= 2048),

    -- Deserialized, minified and serialized workflow.
    input_graph   JSONB     NOT NULL DEFAULT '{}'::JSONB,
    -- Compiler information, including version and error counts.
    compiler_meta JSONB     NOT NULL DEFAULT '{}'::JSONB,

    -- Timestamps for tracking the record's lifecycle.
    created_at    TIMESTAMP NOT NULL DEFAULT current_timestamp,
    updated_at    TIMESTAMP NOT NULL DEFAULT current_timestamp,
    deleted_at    TIMESTAMP          DEFAULT NULL,

    -- Ensures that the record was updated only after it was created.
    CONSTRAINT updated_after_created CHECK (updated_at >= created_at),
    -- Ensures that the record was deleted only after it was created.
    CONSTRAINT deleted_after_created CHECK (deleted_at IS NULL OR deleted_at >= created_at),
    -- Ensures that the record was deleted only after it was updated.
    CONSTRAINT deleted_after_updated CHECK (deleted_at IS NULL OR deleted_at >= updated_at)
);

CREATE TABLE workflow_schedules
(
    -- Unique identifier for a workflow schedules, used as a public resource.
    id          UUID PRIMARY KEY   DEFAULT gen_random_uuid(),
    -- Unique identifier for a workflow, used as a public resource.
    workflow_id UUID      NOT NULL REFERENCES workflows (id) ON DELETE CASCADE,

    -- Timestamps for tracking the record's lifecycle.
    created_at  TIMESTAMP NOT NULL DEFAULT current_timestamp,
    deleted_at  TIMESTAMP          DEFAULT NULL
);

CREATE TABLE workflow_webhooks
(
    -- Unique identifier for a workflow webhooks, used as a public resource.
    id          UUID PRIMARY KEY   DEFAULT gen_random_uuid(),
    -- Unique identifier for a workflow, used as a public resource.
    workflow_id UUID      NOT NULL REFERENCES workflows (id) ON DELETE CASCADE,

    -- Timestamps for tracking the record's lifecycle.
    created_at  TIMESTAMP NOT NULL DEFAULT current_timestamp,
    deleted_at  TIMESTAMP          DEFAULT NULL
);

CREATE TABLE workflow_executions
(
    -- Unique identifier for a workflow executions, used as a public resource.
    id          UUID PRIMARY KEY   DEFAULT gen_random_uuid(),
    -- Unique identifier for a workflow, used as a public resource.
    workflow_id UUID      NOT NULL REFERENCES workflows (id) ON DELETE CASCADE,

    -- Timestamps for tracking the record's lifecycle.
    created_at  TIMESTAMP NOT NULL DEFAULT current_timestamp,
    deleted_at  TIMESTAMP          DEFAULT NULL
);
